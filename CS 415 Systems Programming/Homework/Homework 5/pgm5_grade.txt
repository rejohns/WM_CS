CSCI415
Spring 2014
Programming Assignment 5: Grading Form

STUDENT NAME:  Johns, Robert E.
  
GRADE: [30/30]
SLIP DAYS ON THIS ASSIGNMENT: 2
CUMULATIVE SLIP DAYS: 2

============================================================


NOTE: all tests should be run on the system named bg1. This
      machine is effectively a 16 processor 64-bit system.
      I have disabled nscd on bg1 to make DNS lookups slower.

0. System build. [1 point total]

   [1 pt]  Unpack submission into directory. Make that directory
           the cwd. A simple "make" should build the binary.    1

1. Basic operation [16 points total]:

  a. [5 pts] Execute the following command to check basic i/o and
           counting:

	   ./refstats -b 4 -N 2 -d 0 -D 0 100_line_trace

           Simply check the output for correctness. Make sure that
           ip addresses that don’t resolve are also listed as
           dotted decimal quads with the appropriate count.   5

   b. [5 pts] Execute the following command to check multi-thread
           operation:

	   ./refstats -b 4 -N 2 -d 1000 -D 1000 100_line_trace
	   
           Note that there is a 1 second delay associated with
	   reading from the buffer and after a DNS lookup.
	   This should let you run "ps -eLf" in another window to
	   see 4 threads: main, reader, and 2 lookup threads.

	   Also check that the execution of the program is
	   consistent with the 1 sec delays.

	   Output must also be correct.

           NOTE: if program is not multi-threaded, no credit will
           be received for grading items 1, 2, and 3.  5 

c. [4 pts] Try a real file with lots of lines:

           ./refstats -b 10 -N 2 -d 0 -D 0 full_trace

           Must get correct output. (Sample 3 or 4 interesting sites.)
           Note that this may take a while (DNS timeouts).  4
	   
d. [2 pts] Exploiting the cache:

            ./refstats -b 10 -N 1000 -d 0 -D 0 full_trace

           Must get correct output and must run faster than the
           previous test. This test should run in about 5 minutes.   2

2. LRU Cache Management [9 points total]:
                                          
a. [5 pts] Execute the following:
           
	   ./refstats -b 1 -N 100 -d 0 -D 0 100_line 
	   
           Compare the cache hit rate with the hand-computed hit rate (86%).
           The cache is big enough so that only the first appearance of
           an IP address will cause a fault. Must also get correct output. 5

b. [4 pts] Execute the following:

           ./refstats -b 1 -N 2 -d 0 -D 0 100_line

           Compare the cache hit rate with the hand-computed hit rate (85%).
           Allow a little leeway in the hit rate, given that the existence
           of two lookup threads may cause a little jitter in cache per-
           formance.  Must also get correct output.   4

3. Mulit-file Operation [2 points total]:

a. [2 pts] Multi-file operation:

          ./counter -b 2 -N 1000 -d 0 -D 0 100_line 500_line

	  Ensure correct output.   2

4. Dealing With a Bogus IP Address [2 points total]:

a. [2 pts] Edit a copy of 100_line to add the line “bogus” (without the
   quotes) at 5 random locations in the file. Run the test from 1a using
   the edited version of 100_line and make sure that you get the same
   exact output as the output for 1a.   2
